{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":4574,"byte_end":4604,"line_start":110,"line_end":110,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:110:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":4705,"byte_end":4749,"line_start":112,"line_end":112,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        testing_env!(context.is_view(true).build());","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:112:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.is_view(true).build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":5052,"byte_end":5082,"line_start":121,"line_end":121,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:121:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":5232,"byte_end":5262,"line_start":128,"line_end":128,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:128:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":5367,"byte_end":5584,"line_start":130,"line_end":134,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(contract.storage_balance_bounds().min.into())","highlight_start":1,"highlight_end":76},{"text":"            .predecessor_account_id(accounts(1))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:130:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(contract.storage_balance_bounds().min.into())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(1))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":5704,"byte_end":5878,"line_start":138,"line_end":142,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(1)","highlight_start":1,"highlight_end":33},{"text":"            .predecessor_account_id(accounts(2))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:138:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(2))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6009,"byte_end":6214,"line_start":146,"line_end":151,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .account_balance(env::account_balance())","highlight_start":1,"highlight_end":53},{"text":"            .is_view(true)","highlight_start":1,"highlight_end":27},{"text":"            .attached_deposit(0)","highlight_start":1,"highlight_end":33},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/home/luizfgdo/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3971,"byte_end":3971,"line_start":91,"line_end":91,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:146:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .account_balance(env::account_balance())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .is_view(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused import: `LookupMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1269,"byte_end":1278,"line_start":23,"line_end":23,"column_start":41,"column_end":50,"is_primary":true,"text":[{"text":"use near_sdk::collections::{LazyOption, LookupMap};","highlight_start":41,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1267,"byte_end":1278,"line_start":23,"line_end":23,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"use near_sdk::collections::{LazyOption, LookupMap};","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `LookupMap`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::collections::{LazyOption, LookupMap};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `PromiseOrValue`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1405,"byte_end":1419,"line_start":25,"line_end":25,"column_start":93,"column_end":107,"is_primary":true,"text":[{"text":"use near_sdk::{env, log, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault, PromiseOrValue};","highlight_start":93,"highlight_end":107}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1403,"byte_end":1419,"line_start":25,"line_end":25,"column_start":91,"column_end":107,"is_primary":true,"text":[{"text":"use near_sdk::{env, log, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault, PromiseOrValue};","highlight_start":91,"highlight_end":107}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `PromiseOrValue`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:25:93\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_sdk::{env, log, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault, PromiseOrValue};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4366,"byte_end":4396,"line_start":102,"line_end":102,"column_start":32,"column_end":62,"is_primary":true,"text":[{"text":"            .signer_account_id(predecessor_account_id.clone())","highlight_start":32,"highlight_end":62}],"label":"expected struct `ValidAccountId`, found struct `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:102:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .signer_account_id(predecessor_account_id.clone())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `ValidAccountId`, found struct `std::string::String`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4434,"byte_end":4456,"line_start":103,"line_end":103,"column_start":37,"column_end":59,"is_primary":true,"text":[{"text":"            .predecessor_account_id(predecessor_account_id);","highlight_start":37,"highlight_end":59}],"label":"expected struct `ValidAccountId`, found struct `std::string::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:103:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .predecessor_account_id(predecessor_account_id);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `ValidAccountId`, found struct `std::string::String`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4552,"byte_end":4563,"line_start":109,"line_end":109,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"        let mut context = get_context(accounts(1));","highlight_start":39,"highlight_end":50}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:109:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut context = get_context(accounts(1));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"no method named `ft_total_supply` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `ft_total_supply` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":4778,"byte_end":4793,"line_start":113,"line_end":113,"column_start":29,"column_end":44,"is_primary":true,"text":[{"text":"        assert_eq!(contract.ft_total_supply().0, TOTAL_SUPPLY);","highlight_start":29,"highlight_end":44}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `ft_total_supply`, perhaps you need to implement it:\ncandidate #1: `FungibleTokenCore`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `ft_total_supply` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:113:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `ft_total_supply` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(contract.ft_total_supply().0, TOTAL_SUPPLY);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `ft_total_supply`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `FungibleTokenCore`\u001b[0m\n\n"}
{"message":"no method named `ft_balance_of` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `ft_balance_of` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":4842,"byte_end":4855,"line_start":114,"line_end":114,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"        assert_eq!(contract.ft_balance_of(accounts(1)).0, TOTAL_SUPPLY);","highlight_start":29,"highlight_end":42}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\ncandidate #1: `FungibleTokenCore`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `ft_balance_of` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:114:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `ft_balance_of` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(contract.ft_balance_of(accounts(1)).0, TOTAL_SUPPLY);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `FungibleTokenCore`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5030,"byte_end":5041,"line_start":120,"line_end":120,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"        let context = get_context(accounts(1));","highlight_start":35,"highlight_end":46}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:120:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let context = get_context(accounts(1));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5210,"byte_end":5221,"line_start":127,"line_end":127,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"        let mut context = get_context(accounts(2));","highlight_start":39,"highlight_end":50}],"label":"expected struct `std::string::String`, found struct `ValidAccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:127:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut context = get_context(accounts(2));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `std::string::String`, found struct `ValidAccountId`\u001b[0m\n\n"}
{"message":"no method named `storage_balance_bounds` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `storage_balance_bounds` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":5476,"byte_end":5498,"line_start":132,"line_end":132,"column_start":40,"column_end":62,"is_primary":true,"text":[{"text":"            .attached_deposit(contract.storage_balance_bounds().min.into())","highlight_start":40,"highlight_end":62}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `storage_balance_bounds`, perhaps you need to implement it:\ncandidate #1: `StorageManagement`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `storage_balance_bounds` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:132:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `storage_balance_bounds` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            .attached_deposit(contract.storage_balance_bounds().min.into())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `storage_balance_bounds`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `StorageManagement`\u001b[0m\n\n"}
{"message":"no method named `storage_deposit` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `storage_deposit` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":5666,"byte_end":5681,"line_start":136,"line_end":136,"column_start":18,"column_end":33,"is_primary":true,"text":[{"text":"        contract.storage_deposit(None, None);","highlight_start":18,"highlight_end":33}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `storage_deposit`, perhaps you need to implement it:\ncandidate #1: `StorageManagement`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `storage_deposit` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:136:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `storage_deposit` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        contract.storage_deposit(None, None);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `storage_deposit`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `StorageManagement`\u001b[0m\n\n"}
{"message":"no method named `ft_transfer` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `ft_transfer` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":5944,"byte_end":5955,"line_start":144,"line_end":144,"column_start":18,"column_end":29,"is_primary":true,"text":[{"text":"        contract.ft_transfer(accounts(1), transfer_amount.into(), None);","highlight_start":18,"highlight_end":29}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `ft_transfer`, perhaps you need to implement it:\ncandidate #1: `FungibleTokenCore`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `ft_transfer` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:144:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `ft_transfer` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        contract.ft_transfer(accounts(1), transfer_amount.into(), None);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `ft_transfer`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `FungibleTokenCore`\u001b[0m\n\n"}
{"message":"no method named `ft_balance_of` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `ft_balance_of` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":6243,"byte_end":6256,"line_start":152,"line_end":152,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"        assert_eq!(contract.ft_balance_of(accounts(2)).0, (TOTAL_SUPPLY - transfer_amount));","highlight_start":29,"highlight_end":42}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\ncandidate #1: `FungibleTokenCore`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `ft_balance_of` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:152:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `ft_balance_of` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(contract.ft_balance_of(accounts(2)).0, (TOTAL_SUPPLY - transfer_amount));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `FungibleTokenCore`\u001b[0m\n\n"}
{"message":"no method named `ft_balance_of` found for struct `Contract` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1499,"byte_end":1518,"line_start":29,"line_end":29,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Contract{","highlight_start":1,"highlight_end":20}],"label":"method `ft_balance_of` not found for this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":6336,"byte_end":6349,"line_start":153,"line_end":153,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"        assert_eq!(contract.ft_balance_of(accounts(1)).0, transfer_amount);","highlight_start":29,"highlight_end":42}],"label":"method not found in `Contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\ncandidate #1: `FungibleTokenCore`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `ft_balance_of` found for struct `Contract` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:153:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmethod `ft_balance_of` not found for this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(contract.ft_balance_of(accounts(1)).0, transfer_amount);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait defines an item `ft_balance_of`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `FungibleTokenCore`\u001b[0m\n\n"}
{"message":"aborting due to 19 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 19 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0433, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
